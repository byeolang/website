import { layer } from './tileset.mjs'

// grassland:
//  since the `sea` is designed to be drawn repeatedly, the bottom layer is
//  grassland, not the `sea`.
//  only values between 8 and 11 are allowed here. in particular, never use 12.
//  for optimization, use -1 instead of 12 to further reduce the number of tiles.
const glassland = new layer(
  [
  // 1:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], // done
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], // done
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8,  8,  8, -1, -1, -1, -1, -1], // done
    [-1, -1, -1,  8,  8,  8,  8, -1, -1, -1, -1, -1,  8,  8,  8, -1, -1, -1, -1, -1], // done
    [-1,  8,  8,  8,  8,  8,  8, -1, -1, -1, -1, -1,  8,  8,  8, -1, -1, -1, -1, -1], // done
  // 5:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [-1,  8,  8,  8,  8, 11,  8,  8,  8,  8,  8,  8,  8,  8,  8, -1, -1, -1, -1, -1], // done
    [-1,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, -1, -1, -1, -1, -1], // done
    [-1,  8,  8,  8,  8,  8,  8,  8,  8, 10,  8,  8,  8,  8,  8,  8, -1, -1, -1, -1], // done
    [-1,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, -1, -1, -1], // done
    [-1,  8,  8,  8,  8,  8,  9,  8,  8,  8,  8,  8,  8,  9,  8,  8,  8, -1, -1, -1], // done
  // 10:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [-1,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 10,  8,  8,  8,  8, -1, -1, -1],
    [-1,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, -1, -1, -1],
    [-1,  8,  8,  8,  8,  8,  8,  8,  8, 11,  8,  8,  8,  8,  8,  8,  8, -1, -1, -1],
    [-1,  8,  8,  8,  8,  8, 10,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, -1, -1, -1],
    [-1,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, -1, -1, -1, -1],
  // 15:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [-1,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, -1, -1, -1, -1, -1],
    [-1,  8,  8,  8,  8,  8,  8,  8,  9,  8,  8,  8, 11,  8,  8, -1, -1, -1, -1, -1],
    [-1,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, -1, -1, -1, -1, -1, -1],
    [-1,  8,  8,  8,  8,  8,  8,  8,  8,  8, 10,  8,  8, -1, -1, -1, -1, -1, -1, -1],
    [-1,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, -1, -1, -1, -1, -1, -1, -1, -1],
  // 20:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
  // 25:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
  // 30:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
  // 35:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
  // 40:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
    [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 8],
  ]
);

// structure:
//  structures such as roads, houses, and stones are placed here.
//  values between 8 ~ 11 must never be here. these values are drawn by
//  `grassland` layer.
//  all structures have transparent background on its image. so you have to put
//  some grass underneath it to the same coordinates in `grassland` layer.
const structure = new layer(
  [
  // 1:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], // done
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], // done
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2, -1, -1, -1, -1, -1], // done
    [-1, -1, -1,  0,  1,  1,  2, -1, -1, -1, -1, -1,  7, 13,  3, -1, -1, -1, -1, -1], // done
    [-1,  0,  1, 29, 40, -1,  3, -1, -1, -1, -1, -1,  7, 14,  3, -1, -1, -1, -1, -1], // done
  // 5:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [13,  7, -1, 36, -1, -1, 32,  1,  1,  1,  1,  1, 29, 15,  3, -1, -1, -1, -1, -1], // done
    [-1,  7, -1, 39, 36, 37, 39, 38, -1, -1, -1, -1, -1, 15,  3, -1, -1, -1, -1, -1], // done
    [-1,  7, -1, 36,  8, 38, 39, -1, -1, -1, -1, -1, 20, 22, 32,  2, -1, -1, -1, -1], // done
    [-1,  7, -1, 35, 14, -1, -1, -1, -1, -1, -1, 20, 22, -1, -1, 32,  2, -1, -1, -1], // done
    [-1,  7, -1, -1, 15, -1, -1, -1, 42, 20, 18, 22, -1, -1, -1, -1,  3, -1, -1, -1], // done
  // 10:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [13,  7, -1, -1, 15, -1, -1, 20, 18, 22, -1, 43, -1, -1, 14, -1,  3, -1, -1, -1], // done
    [-1,  7, -1, -1, 24, 18, 18, 22, -1, -1, -1, 31,  5, 30, 15, -1,  3, -1, -1, -1], // done
    [-1,  7, -1, -1, 15, -1, -1, -1, -1, -1, -1,  3,  0, 29, 24, 19,  3, -1, -1, -1], // done
    [-1,  7, -1, -1, 15, -1, -1, -1, -1, -1, -1, 32, 29, 61, 22, 31,  4, -1, -1, -1], // done
    [-1,  7, 34, 18, 26, -1, -1, -1, -1, -1, -1, 43, 42, 41, 31,  4, -1, -1, -1, -1], // done
  // 15:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [13,  7, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 43, 41,  3, -1, -1, -1, -1, -1], // done
    [-1,  7, -1, -1, 23, 18, 21, -1, -1, -1, -1, 42, 41, 31,  4, -1, -1, -1, -1, -1], // done
    [-1,  7, -1, -1, -1, -1, 15, -1, -1, -1, 40, 41, 31,  4, -1, -1, -1, -1, -1, -1], // done
    [-1,  7, -1, -1, -1, -1, 15, -1, -1, -1, -1, 31,  4, -1, -1, -1, -1, -1, -1, -1], // done
    [-1, 46, 56, 56, 56, 56, 56, 56, 56, 58, 45,  3, -1, -1, -1, -1, -1, -1, -1, -1], // done
  // 20:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
  // 25:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
  // 30:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
  // 35:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
  // 40:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
  ]
);

// deco:
//  this layer is rarely used. it's used for thinks like characters or bridges
//  in the background, and things that are decorated on top of the structure layer.
const deco = new layer(
  [
  // 1:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  // 5:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  // 10:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  // 15:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  // 20:
  //  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  // 25:
  //  1   2   3   4   5   6   7   8   9  10  11  -1  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  // 30:
  //  1   2   3   4   5   6   7   8   9  10  11  -1  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  // 35:
  //  1   2   3   4   5   6   7   8   9  10  11  -1  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  // 40:
  //  1   2   3   4   5   6   7   8   9  10  11  -1  13  14  15  16  17  18  19  20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  ]
)

export const layers = [
  glassland, structure, deco
]